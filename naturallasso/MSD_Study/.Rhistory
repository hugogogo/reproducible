setwd("~/Desktop/sim_scaled_cv_new")
source('~/Desktop/sim_scaled_cv_new/plot_without_ggplot.R', echo=TRUE)
source('~/Desktop/sim_scaled_cv_new/plot_without_ggplot.R', echo=TRUE)
source('~/Desktop/sim_scaled_cv_new/plot_without_ggplot.R', echo=TRUE)
source('~/Desktop/sim_scaled_cv_new/plot_without_ggplot.R', echo=TRUE)
source('~/Desktop/sim_scaled_cv_new/plot_without_ggplot.R', echo=TRUE)
source('~/Desktop/sim_scaled_cv_new/plot_without_ggplot.R', echo=TRUE)
sim
source('~/Desktop/sim_cv/plot.R', echo=TRUE)
source('~/Desktop/sim_cv/plot.R', echo=TRUE)
source('~/Desktop/sim_cv/plot.R', echo=TRUE)
source('~/Desktop/sim_cv/plot.R', echo=TRUE)
source('~/Desktop/sim_cv/plot.R', echo=TRUE)
source('~/Desktop/sim_cv/plot.R', echo=TRUE)
source('~/Desktop/sim_cv/plot.R', echo=TRUE)
col_seq <- gray.colors(6)
col_seq
source('~/Desktop/sim_cv/plot.R', echo=TRUE)
source('~/Desktop/sim_cv/plot.R', echo=TRUE)
source('~/Desktop/sim_cv/plot.R', echo=TRUE)
source('~/Desktop/sim_cv/plot.R', echo=TRUE)
source('~/Desktop/sim_cv/plot.R', echo=TRUE)
source('~/Desktop/sim_cv/plot.R', echo=TRUE)
source('~/Desktop/sim_cv/plot.R', echo=TRUE)
source('~/Desktop/sim_cv/plot.R', echo=TRUE)
source('~/Desktop/sim_cv/plot.R', echo=TRUE)
mat <- matrix(c(1, 4, 2, 5, 3, 6), 2)
mat
?layout
source('~/Desktop/sim_cv/plot.R', echo=TRUE)
source('~/Desktop/sim_cv/plot.R', echo=TRUE)
source('~/Desktop/sim_cv/plot.R', echo=TRUE)
source('~/Desktop/sim_cv/plot.R', echo=TRUE)
source('~/Desktop/sim_cv/plot.R', echo=TRUE)
source('~/Desktop/sim_cv/plot.R', echo=TRUE)
source('~/Desktop/sim_cv/plot.R', echo=TRUE)
source('~/Desktop/sim_cv/plot.R', echo=TRUE)
source('~/Desktop/sim_cv/plot.R', echo=TRUE)
source('~/Desktop/sim_cv/plot.R', echo=TRUE)
source('~/Desktop/sim_cv/plot.R', echo=TRUE)
setwd("~/Desktop/sim_Bayati_and_fix")
source('~/Desktop/sim_Bayati_and_fix/plot.R', echo=TRUE)
rm(list = ls())
sim_name <- "relerr_cv_Bayati"
metric_name <- "mse"
sim <- load_simulation(name = sim_name) %>% subset_simulation(alpha %in% c(0.1, 0.3, 0.5, 0.7, 0.9) & rho %in% c(0.3, 0.6, 0.9))
sim
source('~/Desktop/sim_Bayati_and_fix/plot.R', echo=TRUE)
sim_sub
evals(sim_sub)
sim <- load_simulation(name = sim_name)
sim
evals(sim)
sim <- load_simulation(name = sim_name) %>% evaluate(metrics = c("mse", "ratio"))
source("eval_functions.R")
sim <- load_simulation(name = sim_name) %>% evaluate(metrics = c("mse", "ratio"))
sim <- load_simulation(name = sim_name) %>% evaluate(metrics = list(mse, ratio))
sim
sim_name <- "relerr_fix_guess"
sim_name
sim <- load_simulation(name = sim_name)
sim
sim <- load_simulation(name = sim_name) %>% evaluate(metrics = list(mse, ratio))
sim
save_simulation(sim)
sim <- load_simulation(name = sim_name) %>% subset_simulation(alpha %in% c(0.1, 0.3, 0.5, 0.7, 0.9) & rho %in% c(0.3, 0.6, 0.9))
sim
evals(sim)
source('~/Desktop/sim_Bayati_and_fix/plot.R', echo=TRUE)
source('~/Desktop/sim_Bayati_and_fix/plot.R', echo=TRUE)
source('~/Desktop/sim_Bayati_and_fix/plot.R', echo=TRUE)
source('~/Desktop/sim_Bayati_and_fix/plot.R', echo=TRUE)
source('~/Desktop/sim_Bayati_and_fix/plot.R', echo=TRUE)
source('~/Desktop/sim_Bayati_and_fix/plot.R', echo=TRUE)
source('~/Desktop/sim_Bayati_and_fix/plot.R', echo=TRUE)
source('~/Desktop/sim_Bayati_and_fix/plot.R', echo=TRUE)
source('~/Desktop/sim_Bayati_and_fix/plot_for_paper.R', echo=TRUE)
source('~/Desktop/sim_Bayati_and_fix/plot_for_paper.R', echo=TRUE)
source('~/Desktop/sim_Bayati_and_fix/plot_for_paper.R', echo=TRUE)
sim <- evaluate(sim, metrics = list(mse, ratio))
source("model_functions.R")
source("method_functions.R")
source("eval_functions.R")
source('~/Desktop/sim_Bayati_and_fix/plot_for_paper.R', echo=TRUE)
source('~/Desktop/sim_Bayati_and_fix/eval_functions.R', echo=TRUE)
source('~/Desktop/sim_Bayati_and_fix/plot_for_paper.R', echo=TRUE)
sim
evals(sim)
source('~/Desktop/sim_Bayati_and_fix/plot_for_paper.R', echo=TRUE)
setwd("~/Desktop/sim_cv")
source('~/Desktop/sim_cv/plot_for_paper.R', echo=TRUE)
source('~/Desktop/sim_cv/plot_for_paper.R', echo=TRUE)
source('~/Desktop/sim_cv/plot_for_paper.R', echo=TRUE)
source('~/Desktop/sim_cv/plot_for_paper.R', echo=TRUE)
source('~/Desktop/sim_cv/plot_for_paper.R', echo=TRUE)
source('~/Desktop/sim_cv/plot_for_paper.R', echo=TRUE)
source('~/Desktop/sim_cv/plot_for_paper.R', echo=TRUE)
source('~/Desktop/sim_cv/plot_for_paper.R', echo=TRUE)
sim <- load_simulation("relerr_all", dir = "~/Desktop/sim_cv")
sim
ev <- sim %>% evals %>% as.data.frame
sim <- subset_simulation(sim, tau == 1 & rho == 06)
sim <- subset_simulation(sim, snr == 1 & rho == 06)
ev <- sim %>% evals %>% as.data.frame
head(ev)
sim <- subset_simulation(sim, snr == 1 & rho == 0.6)
sim <- load_simulation("relerr_all", dir = "~/Desktop/sim_cv")
sim <- subset_simulation(sim, snr == 1 & rho == 0.6)
sim
ev <- sim %>% evals %>% as.data.frame
ev
head(ev)
library(tidyverse)
install.packages("tidyverse")
tab <- ev %>% group_by(Model, Method, Draw) %>%
spread(Draw, mse)
library(tidyverse)
library(tidyverse)
install.packages("tidyverse")
library(dplyr)
dr <- levels(ev$Draw)
tab <- ev %>% group_by(Model, Method, Draw) %>%
spread(Draw, mse)
library(tidyr)
tab <- ev %>% group_by(Model, Method, Draw) %>%
spread(Draw, mse)
tab
tab[1, ]
mods <- levels(tab$Model)
mets <- levels(tab$Method)
mods
mets
pvals <- matrix(NA, length(mods), length(mets))
rownames(pvals) <- mods
colnames(pvals) <- unlist(sapply(mets,
function(mm) paste(setdiff(mets, mm),
collapse = " vs. ")))
head(pvals)
head(tab)
mets
mets <- levels(tab$Method)[c(1, 3)]
mets
mets <- levels(tab$Method)[c(1, 4)]
mets
pvals <- matrix(NA, length(mods), length(mets))
rownames(pvals) <- mods
colnames(pvals) <- unlist(sapply(mets,
function(mm) paste(setdiff(mets, mm),
collapse = " vs. ")))
pvals
mets <- levels(tab$Method)[c(1, 3, 4)]
pvals <- matrix(NA, length(mods), length(mets))
rownames(pvals) <- mods
colnames(pvals) <- unlist(sapply(mets,
function(mm) paste(setdiff(mets, mm),
collapse = " vs. ")))
pvals
for (m in seq_along(mods)) {
for (me in seq_along(mets)) {
vals <- tab[tab$Model == mods[m] & tab$Method != mets[me], -(1:2)]
pvals[m, me] <- wilcox.test(as.numeric(vals[1, ] - vals[2, ]))$p.value
}
}
pvals
vals
head(tab)
for (m in seq_along(mods)) {
for (me in seq_along(mets)) {
vals <- tab[tab$Model == mods[m] & tab$Method != mets[me], -(1:4)]
pvals[m, me] <- wilcox.test(as.numeric(vals[1, ] - vals[2, ]))$p.value
}
}
for (m in seq_along(mods)) {
for (me in seq_along(mets)) {
vals <- tab[tab$Model == mods[m] & tab$Method != mets[me], -(1:4)]
browser()
pvals[m, me] <- wilcox.test(as.numeric(vals[1, ] - vals[2, ]))$p.value
}
}
vals <- tab[tab$Model == mods[m] & tab$Method != mets[me], -(1:4)]
vals
tab
tab$Model == mods[m]
dim(tab)
mets
sim <- load_simulation("relerr_all", dir = "~/Desktop/sim_cv")
sim <- subset_simulation(sim, snr == 1 & rho == 0.6, methods = c("nl_cv_df", "nl_cv_obj", "ol_cv_obj"))
sim <- load_simulation("relerr_all", dir = "~/Desktop/sim_cv")
sim <- subset_simulation(sim, snr == 1 & rho == 0.6, methods = c("nl_cv_df", "nl_cv_obj", "ol_cv_obj"))
ev <- sim %>% evals %>% as.data.frame
dim(ev)
names(ev)
library(dplyr)
library(tidyr)
dr <- levels(ev$Draw)
tab <- ev %>% group_by(Model, Method, Draw) %>%
spread(Draw, mse)
mods <- levels(tab$Model)
mets <- levels(tab$Method)
mets
dim(tab)
tab <- ev %>% select(Model, Method, Draw, mse) %>% group_by(Model, Method, Draw) %>%
spread(Draw, mse)
dim(tab)
head(tab)
mods <- levels(tab$Model)
mets <- levels(tab$Method)
pvals <- matrix(NA, length(mods), length(mets))
rownames(pvals) <- mods
colnames(pvals) <- unlist(sapply(mets,
function(mm) paste(setdiff(mets, mm),
collapse = " vs. ")))
for (m in seq_along(mods)) {
for (me in seq_along(mets)) {
vals <- tab[tab$Model == mods[m] & tab$Method != mets[me], -(1:4)]
browser()
pvals[m, me] <- wilcox.test(as.numeric(vals[1, ] - vals[2, ]))$p.value
}
}
vals
for (m in seq_along(mods)) {
for (me in seq_along(mets)) {
vals <- tab[tab$Model == mods[m] & tab$Method != mets[me], -(1:4)]
pvals[m, me] <- wilcox.test(as.numeric(vals[1, ] - vals[2, ]))$p.value
}
}
pvals
source('~/Downloads/digits_data.R', echo=TRUE)
pvals
for (m in seq_along(mods)) {
for (me in seq_along(mets)) {
vals <- tab[tab$Model == mods[m] & tab$Method != mets[me], -(1:4)]
pvals[m, me] <- t.test(as.numeric(vals[1, ] - vals[2, ]))$p.value
}
}
pvals
for (m in seq_along(mods)) {
for (me in seq_along(mets)) {
vals <- tab[tab$Model == mods[m] & tab$Method != mets[me], -(1:2)]
pvals[m, me] <- t.test(as.numeric(vals[1, ] - vals[2, ]))$p.value
}
}
pvals
prop_wins <- matrix(NA, length(mods), length(mets))
rownames(prop_wins) <- mets
rownames(prop_wins) <- mods
colnames(prop_wins) <- unlist(sapply(mets,
function(mm) paste(setdiff(mets, mm),
collapse = " vs. ")))
prop_wins
for (m in seq_along(mods)) {
for (me in seq_along(mets)) {
vals <- tab[tab$Model == mods[m] & tab$Method != mets[me], -(1:2)]
prop_wins[m, me] <- sum(vals[1, ] < vals[2, ])
}
}
prop_wins
vals
for (m in seq_along(mods)) {
for (me in seq_along(mets)) {
browser()
vals <- tab[tab$Model == mods[m] & tab$Method != mets[me], -(1:2)]
prop_wins[m, me] <- sum(vals[1, ] < vals[2, ])
}
}
tab[tab$Model == mods[m] & tab$Method != mets[me], ]
for (m in seq_along(mods)) {
for (me in seq_along(mets)) {
vals <- tab[tab$Model == mods[m] & tab$Method != mets[me], -(1:2)]
prop_wins[m, me] <- sum(vals[1, ] < vals[2, ])
}
}
for (m in seq_along(mods)) {
for (me in seq_along(mets)) {
vals <- tab[tab$Model == mods[m] & tab$Method != mets[me], -(1:2)]
prop_wins[m, me] <- sum(vals[1, ] < vals[2, ])
}
}
prop_wins
pvals
for (m in seq_along(mods)) {
for (me in seq_along(mets)) {
vals <- tab[tab$Model == mods[m] & tab$Method != mets[me], -(1:2)]
pvals[m, me] <- wilcox.test(as.numeric(vals[1, ] - vals[2, ]))$p.value
}
}
pvals
?wilcox.test
head(tab)
plot(0, 0)
plot(tab[1, ])
plot(tab[1, -1:2])
plot(tab[1, -(1:2)])
tab[1, -(1:2)]
range(tab[1, -(1:2)])
plot(as.numeric(tab[1, -(1:2)]))
plot(as.numeric(tab[1, -(1:2)]), type = "l")
lines(as.numeric(tab[2, -(1:2)]), col = "red")
head(tab)
pvals
pvals[, 2]
pvals
for (m in seq_along(mods)) {
for (me in seq_along(mets)) {
vals <- tab[tab$Model == mods[m] & tab$Method != mets[me], -(1:2)]
pvals[m, me] <- t.test(as.numeric(vals[1, ] - vals[2, ]))$p.value
}
}
pvals
head(tab)
plot(as.numeric(tab[7, -(1:2)]), type = "l")
lines(as.numeric(tab[9, -(1:2)]), col = "red")
plot(as.numeric(tab[9, -(1:2)]), type = "l")
lines(as.numeric(tab[7, -(1:2)]), col = "red")
?t.test
sim <- load_simulation("relerr_all", dir = "~/Desktop/sim_cv")
sim <- subset_simulation(sim, snr == 1 & rho %in% c(0.3, 0.6, 0.9), methods = c("nl_cv_df", "nl_cv_obj", "ol_cv_obj"))
sim <- load_simulation(name = "relerr_all")
sim
sim <- load_simulation(name = "relerr_cv_with_slasso")
sim
?simulate_from_model
source('~/Desktop/sim_cv/main.R', echo=TRUE)
source('~/Desktop/sim_cv/main.R', echo=TRUE)
sim
save_simulation(sim)
sim_new <- load_simulation("more_cv_setup")
sim_new
sim <- load_simulation("more_cv_setup")
sim
sim <- load_simulation("more_cv_setup") %>%
subset_simulation(methods = "") %>%
rename("more_cv") %>% relabel("more_cv") %>%
run_method(list(nl_cv + obj, nl_cv + naive, nl_cv + df, ol_cv + obj, oracle))
sim <- load_simulation("more_cv_setup") %>%
subset_simulation(methods = "") %>%
rename("more_cv") %>% relabel("more_cv") %>%
run_method(list(nl_cv + obj, nl_cv + naive, nl_cv + df, ol_cv + obj, oracle)) %>%
evaluate(metrics = list(ratio, mse))
save_simulation(sim)
sim_new <- load_simulation("more_cv")
sim_new
source('~/Desktop/sim_cv/plot_for_paper_more.R', echo=TRUE)
rm(list = ls())
source("model_functions.R")
source("method_functions.R")
source("eval_functions.R")
sim <- load_simulation("more_cv") %>% evaluate(metrics = list(ratio, mse))
source('~/Desktop/sim_cv/plot_for_paper_more.R', echo=TRUE)
source('~/Desktop/sim_cv/plot_for_paper_more.R', echo=TRUE)
source('~/Desktop/sim_cv/main.R', echo=TRUE)
save_simulation(sim)
source('~/Desktop/sim_cv/plot_for_paper_more.R', echo=TRUE)
source('~/Desktop/sim_cv/plot_for_paper_more.R', echo=TRUE)
setwd("~/Dropbox/unknown_variance/MSD_Study")
source('~/Dropbox/unknown_variance/MSD_Study/MSD_new.R', echo=TRUE)
source('~/Dropbox/unknown_variance/MSD_Study/table_for_paper.R', echo=TRUE)
source('~/Dropbox/unknown_variance/MSD_Study/table_for_paper.R', echo=TRUE)
source('~/Dropbox/unknown_variance/MSD_Study/MSD_new.R', echo=TRUE)
warnings()
cc_mse
dim(result_mse)
result_mse
source('~/Dropbox/unknown_variance/MSD_Study/table_for_paper.R', echo=TRUE)
load("./MSD_result.RData")
ls()
result_mse
full_mse <- melt(result_mse, id.vars = 'n')
full_mse
full_mse[full_mse$n == 20, ]
dim(full_mse[full_mse$n == 20, ])
full_mse %>% group_by(n, variable)
tmp <- full_mse %>% group_by(n, variable)
dim(tmp)
dim(full_mse[full_mse$n == 20 & full_mse$variable == 'naive', ])
full_mse[full_mse$n == 20 & full_mse$variable == 'naive', ]
full_mse[full_mse$n == 20 & full_mse$variable == 'naive', 3]
mean(full_mse[full_mse$n == 20 & full_mse$variable == 'naive', 3])
sd(full_mse[full_mse$n == 20 & full_mse$variable == 'naive', 3])
cc_mse
?sd
cc_mse$v_sd <- cc_mse$v_sd / sqrt(2000)
cc_mse
cc_mse$v_sd <- cc_mse$v_sd * sqrt(2000) / sqrt(100)
cc_mse
source('~/Dropbox/unknown_variance/MSD_Study/table_for_paper.R', echo=TRUE)
source('~/Dropbox/unknown_variance/MSD_Study/table_for_paper.R', echo=TRUE)
tab <- print(xtable(t(M)))
rm(list = ls())
library(simulator)
library(reshape2)
library(xtable)
load("./MSD_result.RData")
#ylab <- expression(E~group("[", hat(sigma) / sigma, "]"))
#ylabel <- "Relative error"
ylabel <- "Mean squared error"
cc <- cc_mse
n_seq <- c(20, 40, 60, 80, 100, 120)
#n_seq <- cc$n
cc <- cc[cc$variable != "Bayati" & cc$n %in% n_seq, ]
method_name <- levels(droplevels(unique(cc$variable)))
cc$v_sd <- cc$v_sd / sqrt(2000)
multiplier <- 100
mean_table <- round(multiplier * as.matrix(dcast(cc, n ~ variable, value.var = "v_mean")), 2)[, -1]
sd_table <- round(multiplier * as.matrix(dcast(cc, n ~ variable, value.var = "v_sd")), 2)[, -1]
nn <- nrow(mean_table)
M <- matrix(as.vector(paste(as.character(mean_table), " (", as.vector(sd_table), ")", sep = "")), nrow = nn)
M <- cbind(as.character(unique(cc$n)), M)
colnames(M) <- c("n", "naive", "Reid et, al", "natural", "organic", "scaled(1)", "scaled(2)", "organic(2)", "organic(3)")
tab <- print(xtable(t(M)))
cc
ls()
result_mse[result_mse$n == 80, ]$scaled.2.
plot(result_mse[result_mse$n == 80, ]$scaled.2.)
max(result_mse[result_mse$n == 80, ]$scaled.2.)
a <- result_mse[result_mse$n == 80, ]$scaled.2.
a[a!=max(a)]
b <- a[a!=max(a)]
b
plot(b)
mean(b)
sd(b)
sd(b) / sqrt(2000)
source('~/Dropbox/unknown_variance/paired_tests.R', echo=TRUE)
pvals_w
round(pvals_t, 4)
round(pvals_t, 4) %>% knitr::kable()
library(xtable)
round(pvals_t, 5) %>% xtable %>% print
round(pvals_t, 6) %>% xtable %>% print
round(pvals_w, 6) %>% xtable %>% print
mets
colnames(pvals_w)
?sample
sample(10)
n_seq <- seq(20, 120, by = 20)
n_seq
source('~/Dropbox/unknown_variance/MSD_Study/MSD_new.R', echo=TRUE)
warnings()
source('~/Dropbox/unknown_variance/MSD_Study/table_for_paper.R', echo=TRUE)
M
rm(list = ls())
library(simulator)
library(reshape2)
library(xtable)
load("./MSD_result_new.RData")
#ylab <- expression(E~group("[", hat(sigma) / sigma, "]"))
#ylabel <- "Relative error"
ylabel <- "Mean squared error"
ndraws <- 1000
cc <- cc_mse
cc <- cc[cc$variable != "Bayati", ]
method_name <- levels(droplevels(unique(cc$variable)))
cc$v_sd <- cc$v_sd / sqrt(ndraws)
multiplier <- 100
mean_table <- round(multiplier * as.matrix(dcast(cc, n ~ variable, value.var = "v_mean")), 2)[, -1]
sd_table <- round(multiplier * as.matrix(dcast(cc, n ~ variable, value.var = "v_sd")), 2)[, -1]
nn <- nrow(mean_table)
M <- matrix(as.vector(paste(as.character(mean_table), " (", as.vector(sd_table), ")", sep = "")), nrow = nn)
M <- cbind(as.character(unique(cc$n)), M)
colnames(M) <- c("n", "naive", "Reid et, al", "natural", "organic", "scaled(1)", "scaled(2)", "organic(2)", "organic(3)")
M
ls()
result_mse
M
mean_table
cc
cc
head(result_mse)
a <- result_mse[result_mse$n == 80, ]
a
range(a$scaled.1.)
outlier <- result_mse[result_mse$n == 80, ]$scaled.1.
outlier
hist(outlier)
mean_table
outlier <- outlier[-which.max(outlier)]
range(outlier)
sigma
outlier <- outlier[-which.max(outlier)]
range(outlier)
outlier
mean(outlier)
mean_table
mean_table[4, 5]
mean_table[4, 5] <- mean(outlier)
mean_table
mean_table[4, 5] <- multiplier * mean(outlier)
mean_table
sd_table[4, 5] <- multiplier * sd(outlier) / sqrt(ndraws)
sd_table
M <- matrix(as.vector(paste(as.character(mean_table), " (", as.vector(sd_table), ")", sep = "")), nrow = nn)
M <- cbind(as.character(unique(cc$n)), M)
colnames(M) <- c("n", "naive", "Reid et, al", "natural", "organic", "scaled(1)", "scaled(2)", "organic(2)", "organic(3)")
M
mean_table
mean_table[4, 5] <- round(multiplier * mean(outlier), 2)
sd_table[4, 5] <- round(multiplier * sd(outlier) / sqrt(ndraws), 2)
M <- matrix(as.vector(paste(as.character(mean_table), " (", as.vector(sd_table), ")", sep = "")), nrow = nn)
M <- cbind(as.character(unique(cc$n)), M)
colnames(M) <- c("n", "naive", "Reid et, al", "natural", "organic", "scaled(1)", "scaled(2)", "organic(2)", "organic(3)")
M
outlier <- result_ratio[result_ratio$n == 80, ]$scaled.1.
range(outlier)
outlier <- outlier[-which.max(outlier)]
outlier <- outlier[-which.max(outlier)]
range(outlier)
source('~/Dropbox/unknown_variance/MSD_Study/table_for_paper.R', echo=TRUE)
source('~/Dropbox/unknown_variance/MSD_Study/table_for_paper.R', echo=TRUE)
tab_mse
xtable(t(M_mse))
xtable(t(M_ratio))
