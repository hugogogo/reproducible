df <- mutate(df, TranSum = Drive + Carpool + Transit + Walk + OtherTransp + WorkAtHome) %>%
mutate(Drive = Drive * 100 / TranSum,
Carpool = Carpool * 100 / TranSum,
Transit = Transit * 100 / TranSum,
Walk = Walk * 100 / TranSum,
OtherTransp = OtherTransp * 100 / TranSum,
WorkAtHome = WorkAtHome * 100 / TranSum) %>%
select(-TranSum)
df <- mutate(df, EmpSum = PrivateWork + PublicWork + SelfEmployed + FamilyWork) %>%
mutate(PrivateWork = PrivateWork * 100 / EmpSum,
PublicWork = PublicWork * 100 / EmpSum,
SelfEmployed = SelfEmployed * 100 / EmpSum,
FamilyWork = FamilyWork * 100 / EmpSum) %>%
select(-EmpSum)
## read in meta data
metadata <- read_csv("../data/metadata.csv")
kable(metadata[, 1:2], "latex")
print(metadata, n = nrow(metadata))
write.csv(df, file = "./220.csv")
range(df$LessThanHighSchool + df$HighSchoolDiploma + df$SomeCollegeOrAssociateDegree + df$BachelorDegreeOrHigher)
summary(df$LessThanHighSchool + df$HighSchoolDiploma + df$SomeCollegeOrAssociateDegree + df$BachelorDegreeOrHigher)
summary(df$LessThanHighSchool + df$HighSchoolDiploma + df$SomeCollegeOrAssociateDegree + df$BachelorDegreeOrHigher, na.remove = TRUE)
## read in education data
education <- read_csv("../data/education.csv") %>%
filter(!is.na(`2003 Rural-urban Continuum Code`)) %>%
filter(State != "PR") %>%
select(-`FIPS Code`,
-`2003 Rural-urban Continuum Code`,
-`2003 Urban Influence Code`,
-`2013 Rural-urban Continuum Code`,
-`2013 Urban Influence Code`) %>%
rename(County = `Area name`) %>%
select(`State`, `County`,
#         `Less than a high school diploma, 2015-19`,
#         `High school diploma only, 2015-19`,
#         `Bachelor's degree or higher, 2015-19`,
LessThanHighSchool = `Percent of adults with less than a high school diploma, 2015-19`,
HighSchoolDiploma = `Percent of adults with a high school diploma only, 2015-19`,
SomeCollegeOrAssociateDegree = `Percent of adults completing some college or associate's degree, 2015-19`,
BachelorDegreeOrHigher = `Percent of adults with a bachelor's degree or higher, 2015-19`) %>%
mutate(EduSum = LessThanHighSchool + HighSchoolDiploma + SomeCollegeOrAssociateDegree + BachelorDegreeOrHigher) %>%
mutate(LessThanHighSchool = LessThanHighSchool * 100 / EduSum,
HighSchoolDiploma = HighSchoolDiploma * 100 / EduSum,
SomeCollegeOrAssociateDegree = SomeCollegeOrAssociateDegree * 100 / EduSum,
BachelorDegreeOrHigher = BachelorDegreeOrHigher * 100 / EduSum) %>%
select(-EduSum)
range(education$LessThanHighSchool + education$HighSchoolDiploma + education$SomeCollegeOrAssociateDegree + education$BachelorDegreeOrHigher)
summary(education$LessThanHighSchool + education$HighSchoolDiploma + education$SomeCollegeOrAssociateDegree + education$BachelorDegreeOrHigher)
summary(education$LessThanHighSchool + education$HighSchoolDiploma + education$SomeCollegeOrAssociateDegree + education$BachelorDegreeOrHigher, na.rm = TRUE)
which(is.na(education$LessThanHighSchool + education$HighSchoolDiploma + education$SomeCollegeOrAssociateDegree + education$BachelorDegreeOrHigher))
idx <- which(is.na(education$LessThanHighSchool + education$HighSchoolDiploma + education$SomeCollegeOrAssociateDegree + education$BachelorDegreeOrHigher))
education[idx, ]
which(is.na(education))
education[which(is.na(education)), ]
education <- read_csv("../data/education.csv") %>%
filter(!is.na(`2003 Rural-urban Continuum Code`)) %>%
filter(State != "PR") %>%
select(-`FIPS Code`,
-`2003 Rural-urban Continuum Code`,
-`2003 Urban Influence Code`,
-`2013 Rural-urban Continuum Code`,
-`2013 Urban Influence Code`) %>%
rename(County = `Area name`) %>%
select(`State`, `County`,
#         `Less than a high school diploma, 2015-19`,
#         `High school diploma only, 2015-19`,
#         `Bachelor's degree or higher, 2015-19`,
LessThanHighSchool = `Percent of adults with less than a high school diploma, 2015-19`,
HighSchoolDiploma = `Percent of adults with a high school diploma only, 2015-19`,
SomeCollegeOrAssociateDegree = `Percent of adults completing some college or associate's degree, 2015-19`,
BachelorDegreeOrHigher = `Percent of adults with a bachelor's degree or higher, 2015-19`) %>%
mutate(EduSum = LessThanHighSchool + HighSchoolDiploma + SomeCollegeOrAssociateDegree + BachelorDegreeOrHigher) %>%
mutate(LessThanHighSchool = LessThanHighSchool * 100 / EduSum,
HighSchoolDiploma = HighSchoolDiploma * 100 / EduSum,
SomeCollegeOrAssociateDegree = SomeCollegeOrAssociateDegree * 100 / EduSum,
BachelorDegreeOrHigher = BachelorDegreeOrHigher * 100 / EduSum) %>%
select(-EduSum)
complete.cases(education)
education[complete.cases(education), ]
education[-complete.cases(education), ]
education[-which(complete.cases(education)), ]
age <- read_csv("../raw/cc-est2011-alldata.csv") %>%
select(`STNAME`, `CTYNAME`, `YEAR`, `AGEGRP`, `TOT_POP`) %>%
filter(YEAR == 1) %>%
group_by(STNAME, CTYNAME)
age$AGEGRP
1+2+3+4
5+6+7+8+9
age <- read_csv("../raw/cc-est2011-alldata.csv") %>%
select(`STNAME`, `CTYNAME`, `YEAR`, `AGEGRP`, `TOT_POP`) %>%
filter(YEAR == 1) %>%
group_by(STNAME, CTYNAME) %>%
summarize(#agegrp1 = sum(TOT_POP[AGEGRP < 5], na.rm = TRUE) / sum(TOT_POP, na.rm = TRUE),
#agegrp2 = sum(TOT_POP[AGEGRP >= 5 & AGEGRP < 14], na.rm = TRUE) / sum(TOT_POP, na.rm = TRUE),
#agegrp3 = sum(TOT_POP[AGEGRP >= 14], na.rm = TRUE) / sum(TOT_POP, na.rm = TRUE),
#mean_agegrp = sum(AGEGRP * TOT_POP, na.rm = TRUE) / sum(TOT_POP, na.rm = TRUE),
AvgAge = sum(((AGEGRP - 1) * 5 + 2) * TOT_POP, na.rm = TRUE) / sum(TOT_POP, na.rm = TRUE)) %>%
rename(State = STNAME, County = CTYNAME) %>%
mutate(State = state.abb[match(`State`, state.name)])
age[is.na(age$State), ]$State <- "DC"
age$AvgAge
hist(age$AvgAge)
age <- read_csv("../raw/cc-est2011-alldata.csv") %>%
select(`STNAME`, `CTYNAME`, `YEAR`, `AGEGRP`, `TOT_POP`) %>%
filter(YEAR == 1) %>%
group_by(STNAME, CTYNAME) %>%
summarize(#agegrp1 = sum(TOT_POP[AGEGRP < 5], na.rm = TRUE) / sum(TOT_POP, na.rm = TRUE),
#agegrp2 = sum(TOT_POP[AGEGRP >= 5 & AGEGRP < 14], na.rm = TRUE) / sum(TOT_POP, na.rm = TRUE),
#agegrp3 = sum(TOT_POP[AGEGRP >= 14], na.rm = TRUE) / sum(TOT_POP, na.rm = TRUE),
mean_agegrp = sum(AGEGRP * TOT_POP, na.rm = TRUE) / sum(TOT_POP, na.rm = TRUE),
AvgAge = sum(((AGEGRP - 1) * 5 + 2) * TOT_POP, na.rm = TRUE) / sum(TOT_POP, na.rm = TRUE)) %>%
rename(State = STNAME, County = CTYNAME) %>%
mutate(State = state.abb[match(`State`, state.name)])
age[is.na(age$State), ]$State <- "DC"
hist(age$mean_agegrp)
hist(age$AvgAge, breaks = 1000)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
indent1 = '    '
indent2 = paste(rep(indent1, 2), collapse='')
indent3 = paste(rep(indent1, 3), collapse='')
doeval = TRUE
doecho = FALSE
library(knitr)
library(tidyverse)
state.name <- c(state.name, "District of Columbia", "Puerto Rico")
state.abb <- c(state.abb, "DC", "PR")
## read in census data
census <- read_csv("../data/acs2017_county_data.csv") %>% select(-CountyId, - VotingAgeCitizen, -ChildPoverty, -Income, -IncomeErr, -IncomePerCap, -IncomePerCapErr, -Employed) %>%
mutate(State = state.abb[match(`State`, state.name)]) %>%
filter(State != "PR") #remove Puerto Rico
head(census)
filter(census, !complete.cases(census))
## read in education data
education <- read_csv("../data/education.csv") %>%
filter(!is.na(`2003 Rural-urban Continuum Code`)) %>%
filter(State != "PR") %>%
select(-`FIPS Code`,
-`2003 Rural-urban Continuum Code`,
-`2003 Urban Influence Code`,
-`2013 Rural-urban Continuum Code`,
-`2013 Urban Influence Code`) %>%
rename(County = `Area name`) %>%
select(`State`, `County`,
#         `Less than a high school diploma, 2015-19`,
#         `High school diploma only, 2015-19`,
#         `Bachelor's degree or higher, 2015-19`,
LessThanHighSchool = `Percent of adults with less than a high school diploma, 2015-19`,
HighSchoolDiploma = `Percent of adults with a high school diploma only, 2015-19`,
SomeCollegeOrAssociateDegree = `Percent of adults completing some college or associate's degree, 2015-19`,
BachelorDegreeOrHigher = `Percent of adults with a bachelor's degree or higher, 2015-19`) %>%
mutate(EduSum = LessThanHighSchool + HighSchoolDiploma + SomeCollegeOrAssociateDegree + BachelorDegreeOrHigher) %>%
mutate(LessThanHighSchool = LessThanHighSchool * 100 / EduSum,
HighSchoolDiploma = HighSchoolDiploma * 100 / EduSum,
SomeCollegeOrAssociateDegree = SomeCollegeOrAssociateDegree * 100 / EduSum,
BachelorDegreeOrHigher = BachelorDegreeOrHigher * 100 / EduSum) %>%
select(-EduSum)
colnames(education)
head(education)
filter(education, !complete.cases(education))
age_coding = c("1 = Age 0 to 4 years",
"2 = Age 5 to 9 years",
"3 = Age 10 to 14 years",
"4 = Age 15 to 19 years",
"5 = Age 20 to 24 years",
"6 = Age 25 to 29 years",
"7 = Age 30 to 34 years",
"8 = Age 35 to 39 years",
"9 = Age 40 to 44 years",
"10 = Age 45 to 49 years",
"11 = Age 50 to 54 years",
"12 = Age 55 to 59 years",
"13 = Age 60 to 64 years",
"14 = Age 65 to 69 years",
"15 = Age 70 to 74 years",
"16 = Age 75 to 79 years",
"17 = Age 80 to 84 years",
"18 = Age 85 years or older")
print(age_coding)
age <- read_csv("../raw/cc-est2011-alldata.csv") %>%
select(`STNAME`, `CTYNAME`, `YEAR`, `AGEGRP`, `TOT_POP`) %>%
filter(YEAR == 1) %>%
group_by(STNAME, CTYNAME) %>%
summarize(#agegrp1 = sum(TOT_POP[AGEGRP < 5], na.rm = TRUE) / sum(TOT_POP, na.rm = TRUE),
#agegrp2 = sum(TOT_POP[AGEGRP >= 5 & AGEGRP < 14], na.rm = TRUE) / sum(TOT_POP, na.rm = TRUE),
#agegrp3 = sum(TOT_POP[AGEGRP >= 14], na.rm = TRUE) / sum(TOT_POP, na.rm = TRUE),
#mean_agegrp = sum(AGEGRP * TOT_POP, na.rm = TRUE) / sum(TOT_POP, na.rm = TRUE),
AvgAge = sum(((AGEGRP - 1) * 5 + 2) * TOT_POP, na.rm = TRUE) / sum(TOT_POP, na.rm = TRUE)) %>%
rename(State = STNAME, County = CTYNAME) %>%
mutate(State = state.abb[match(`State`, state.name)])
age[is.na(age$State), ]$State <- "DC"
# left joining census with education
combined <- left_join(census, education, by = c("State", "County"))
head(combined)
filter(combined, !complete.cases(combined))
# left joining census with education
combined_all <- left_join(combined, age, by = c("State", "County"))
filter(combined_all, !complete.cases(combined_all))
df <- relocate(combined_all, State, County, Poverty)
filter(df, TotalPop != Men + Women)
df <- mutate(df, OriginSum = Hispanic + White + Black + Native + Asian + Pacific) %>%
mutate(Hispanic = Hispanic * 100 / OriginSum,
White = White * 100 / OriginSum,
Black = Black * 100 / OriginSum,
Native = Native * 100 / OriginSum,
Asian = Asian * 100 / OriginSum,
Pacific = Pacific * 100 / OriginSum) %>%
select(-OriginSum)
df <- mutate(df, OccupationSum = Professional + Service + Office + Construction + Production) %>%
mutate(Professional = Professional * 100 / OccupationSum,
Service = Service * 100 / OccupationSum,
Office = Office * 100 / OccupationSum,
Construction = Construction * 100 / OccupationSum,
Production = Production * 100 / OccupationSum) %>%
select(-OccupationSum)
df <- mutate(df, TranSum = Drive + Carpool + Transit + Walk + OtherTransp + WorkAtHome) %>%
mutate(Drive = Drive * 100 / TranSum,
Carpool = Carpool * 100 / TranSum,
Transit = Transit * 100 / TranSum,
Walk = Walk * 100 / TranSum,
OtherTransp = OtherTransp * 100 / TranSum,
WorkAtHome = WorkAtHome * 100 / TranSum) %>%
select(-TranSum)
df <- mutate(df, EmpSum = PrivateWork + PublicWork + SelfEmployed + FamilyWork) %>%
mutate(PrivateWork = PrivateWork * 100 / EmpSum,
PublicWork = PublicWork * 100 / EmpSum,
SelfEmployed = SelfEmployed * 100 / EmpSum,
FamilyWork = FamilyWork * 100 / EmpSum) %>%
select(-EmpSum)
## read in meta data
metadata <- read_csv("../data/metadata.csv")
kable(metadata[, 1:2], "latex")
print(metadata, n = nrow(metadata))
write.csv(df, file = "./220.csv")
df
range(df$Men + df$Women - df$TotalPop)
range(df$Hispanic + df$White + df$Black + df$Native + df$Asian + df$Pacific)
range(df$Professional + df$Service + df$Office + df$Construction + df$Production)
range(df$Drive + df$Carpool + df$Transit + df$Walk + df$OtherTransp + df$WorkAtHome)
summary(MeanCommute)
summary(df$MeanCommute)
range(df$PrivateWork + df$PublicWork + df$SelfEmployed + df$FamilyWork + df$Unemployment)
range(df$PrivateWork + df$PublicWork + df$SelfEmployed + df$FamilyWork)
range(df$LessThanHighSchool + df$HighSchoolDiploma + df$SomeCollegeOrAssociateDegree + df$BachelorDegreeOrHigher)
summary(df$LessThanHighSchool + df$HighSchoolDiploma + df$SomeCollegeOrAssociateDegree + df$BachelorDegreeOrHigher)
summary(df$AvgAge)
unlink('Desktop/220Qual/220data/mine/poverty_cache', recursive = TRUE)
unlink('Desktop/220Qual/220data/mine/poverty_cache', recursive = TRUE)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
indent1 = '    '
indent2 = paste(rep(indent1, 2), collapse='')
indent3 = paste(rep(indent1, 3), collapse='')
doeval = TRUE
doecho = FALSE
library(knitr)
library(tidyverse)
state.name <- c(state.name, "District of Columbia", "Puerto Rico")
state.abb <- c(state.abb, "DC", "PR")
## read in census data
census <- read_csv("../data/acs2017_county_data.csv") %>% select(-CountyId, - VotingAgeCitizen, -ChildPoverty, -Income, -IncomeErr, -IncomePerCap, -IncomePerCapErr, -Employed) %>%
mutate(State = state.abb[match(`State`, state.name)]) %>%
filter(State != "PR") #remove Puerto Rico
head(census)
filter(census, !complete.cases(census))
## read in education data
education <- read_csv("../data/education.csv") %>%
filter(!is.na(`2003 Rural-urban Continuum Code`)) %>%
filter(State != "PR") %>%
select(-`FIPS Code`,
-`2003 Rural-urban Continuum Code`,
-`2003 Urban Influence Code`,
-`2013 Rural-urban Continuum Code`,
-`2013 Urban Influence Code`) %>%
rename(County = `Area name`) %>%
select(`State`, `County`,
#         `Less than a high school diploma, 2015-19`,
#         `High school diploma only, 2015-19`,
#         `Bachelor's degree or higher, 2015-19`,
LessThanHighSchool = `Percent of adults with less than a high school diploma, 2015-19`,
HighSchoolDiploma = `Percent of adults with a high school diploma only, 2015-19`,
SomeCollegeOrAssociateDegree = `Percent of adults completing some college or associate's degree, 2015-19`,
BachelorDegreeOrHigher = `Percent of adults with a bachelor's degree or higher, 2015-19`) %>%
mutate(EduSum = LessThanHighSchool + HighSchoolDiploma + SomeCollegeOrAssociateDegree + BachelorDegreeOrHigher) %>%
mutate(LessThanHighSchool = LessThanHighSchool * 100 / EduSum,
HighSchoolDiploma = HighSchoolDiploma * 100 / EduSum,
SomeCollegeOrAssociateDegree = SomeCollegeOrAssociateDegree * 100 / EduSum,
BachelorDegreeOrHigher = BachelorDegreeOrHigher * 100 / EduSum) %>%
select(-EduSum)
colnames(education)
head(education)
filter(education, !complete.cases(education))
age_coding = c("1 = Age 0 to 4 years",
"2 = Age 5 to 9 years",
"3 = Age 10 to 14 years",
"4 = Age 15 to 19 years",
"5 = Age 20 to 24 years",
"6 = Age 25 to 29 years",
"7 = Age 30 to 34 years",
"8 = Age 35 to 39 years",
"9 = Age 40 to 44 years",
"10 = Age 45 to 49 years",
"11 = Age 50 to 54 years",
"12 = Age 55 to 59 years",
"13 = Age 60 to 64 years",
"14 = Age 65 to 69 years",
"15 = Age 70 to 74 years",
"16 = Age 75 to 79 years",
"17 = Age 80 to 84 years",
"18 = Age 85 years or older")
print(age_coding)
age <- read_csv("../raw/cc-est2011-alldata.csv") %>%
select(`STNAME`, `CTYNAME`, `YEAR`, `AGEGRP`, `TOT_POP`) %>%
filter(YEAR == 1) %>%
group_by(STNAME, CTYNAME) %>%
summarize(#agegrp1 = sum(TOT_POP[AGEGRP < 5], na.rm = TRUE) / sum(TOT_POP, na.rm = TRUE),
#agegrp2 = sum(TOT_POP[AGEGRP >= 5 & AGEGRP < 14], na.rm = TRUE) / sum(TOT_POP, na.rm = TRUE),
#agegrp3 = sum(TOT_POP[AGEGRP >= 14], na.rm = TRUE) / sum(TOT_POP, na.rm = TRUE),
#mean_agegrp = sum(AGEGRP * TOT_POP, na.rm = TRUE) / sum(TOT_POP, na.rm = TRUE),
AvgAge = sum(((AGEGRP - 1) * 5 + 2) * TOT_POP, na.rm = TRUE) / sum(TOT_POP, na.rm = TRUE)) %>%
rename(State = STNAME, County = CTYNAME) %>%
mutate(State = state.abb[match(`State`, state.name)])
age[is.na(age$State), ]$State <- "DC"
# left joining census with education
combined <- left_join(census, education, by = c("State", "County"))
head(combined)
filter(combined, !complete.cases(combined))
# left joining census with education
combined_all <- left_join(combined, age, by = c("State", "County"))
filter(combined_all, !complete.cases(combined_all))
df <- relocate(combined_all, State, County, Poverty)
filter(df, TotalPop != Men + Women)
df <- mutate(df, OriginSum = Hispanic + White + Black + Native + Asian + Pacific) %>%
mutate(Hispanic = Hispanic * 100 / OriginSum,
White = White * 100 / OriginSum,
Black = Black * 100 / OriginSum,
Native = Native * 100 / OriginSum,
Asian = Asian * 100 / OriginSum,
Pacific = Pacific * 100 / OriginSum) %>%
select(-OriginSum)
df <- mutate(df, OccupationSum = Professional + Service + Office + Construction + Production) %>%
mutate(Professional = Professional * 100 / OccupationSum,
Service = Service * 100 / OccupationSum,
Office = Office * 100 / OccupationSum,
Construction = Construction * 100 / OccupationSum,
Production = Production * 100 / OccupationSum) %>%
select(-OccupationSum)
df <- mutate(df, TranSum = Drive + Carpool + Transit + Walk + OtherTransp + WorkAtHome) %>%
mutate(Drive = Drive * 100 / TranSum,
Carpool = Carpool * 100 / TranSum,
Transit = Transit * 100 / TranSum,
Walk = Walk * 100 / TranSum,
OtherTransp = OtherTransp * 100 / TranSum,
WorkAtHome = WorkAtHome * 100 / TranSum) %>%
select(-TranSum)
df <- mutate(df, EmpSum = PrivateWork + PublicWork + SelfEmployed + FamilyWork) %>%
mutate(PrivateWork = PrivateWork * 100 / EmpSum,
PublicWork = PublicWork * 100 / EmpSum,
SelfEmployed = SelfEmployed * 100 / EmpSum,
FamilyWork = FamilyWork * 100 / EmpSum) %>%
select(-EmpSum)
write.csv(df, file = "./220.csv")
setwd("~/Desktop/Numerical_studies/inter_newnew/TripAdvisor")
rm(list = ls())
set.seed(123)
library(sprintr)
library(glmnet)
source("../other_methods/apl.R")
source("../other_methods/RAMP.R")
source("../other_methods/inter_pursuit.R")
load("./rawData/data.RData")
idx_train <- sample(nrow(X_bin), size = ceiling(0.1 * nrow(X_bin)), replace = FALSE)
# we use presense-absense instead of count for now
X <- X_bin
X_train <- X[idx_train, ]
X_test <- X[-idx_train, ]
X_train <- X[idx_train, which(colSums(X_train) != 0)]
X_test <- X[-idx_train, which(colSums(X_train) != 0)]
y_train <- rating_all_final[idx_train]
y_test <- rating_all_final[-idx_train]
n <- nrow(X_train)
p <- ncol(X_train)
method_name <- c("MEL", "Two_stage Hier lasso", "IP", "SIS_lasso",
"sprinter", "sprinter_m", "sprinter2d", "sprinter2d_m",
"rinter", "rinter_m", "rinter2d", "rinter2d_m")
measure_name <- c("prediction rmse",
"# selected main effects",
"# selected interactions")
result <- matrix(NA, nrow = length(measure_name),
ncol = length(method_name))
rownames(result) <- measure_name
colnames(result) <- method_name
out <- list()
## Training starts
idx_method <- 1
out[[idx_method]] <- run_ip(x = X_train, y = y_train, num_keep = 1000)
out[[idx_method]] <- run_ip(x = X_train, y = y_train, num_keep = 800)
source('~/Desktop/Numerical_studies/inter_newnew/TripAdvisor/tripAdvisor.R', echo=TRUE)
result
save(result, file = "result.RData")
rm(list = ls())
set.seed(123)
library(sprintr)
library(glmnet)
source("../other_methods/apl.R")
source("../other_methods/RAMP.R")
source("../other_methods/inter_pursuit.R")
load("./rawData/data.RData")
dim(X_bin)
load("~/Desktop/Numerical_studies/inter_newnew/TripAdvisor/result.RData")
result
t(result)
method_name <- c("MEL", "Two_stage Hier lasso", "IP", "SIS_lasso",
"sprinter", "sprinter_m", "sprinter2d", "sprinter2d_m",
"rinter", "rinter_m", "rinter2d", "rinter2d_m")
measure_name <- c("prediction rmse",
"# selected main effects",
"# selected interactions")
result <- matrix(NA, nrow = length(measure_name),
ncol = length(method_name))
rownames(result) <- measure_name
colnames(result) <- method_name
out <- list()
## Training starts
idx_method <- 1
num_keep <- min(p, ceiling(n / log(n)))
p <- ncol(X_train)
rm(list = ls())
set.seed(123)
library(sprintr)
library(glmnet)
source("../other_methods/apl.R")
source("../other_methods/RAMP.R")
source("../other_methods/inter_pursuit.R")
load("./rawData/data.RData")
idx_train <- sample(nrow(X_bin), size = ceiling(0.1 * nrow(X_bin)), replace = FALSE)
# we use presense-absense instead of count for now
X <- X_bin
X_train <- X[idx_train, ]
X_test <- X[-idx_train, ]
X_train <- X[idx_train, which(colSums(X_train) != 0)]
X_test <- X[-idx_train, which(colSums(X_train) != 0)]
y_train <- rating_all_final[idx_train]
y_test <- rating_all_final[-idx_train]
n <- nrow(X_train)
p <- ncol(X_train)
method_name <- c("MEL", "Two_stage Hier lasso", "IP", "SIS_lasso",
"sprinter", "sprinter_m", "sprinter2d", "sprinter2d_m",
"rinter", "rinter_m", "rinter2d", "rinter2d_m")
measure_name <- c("prediction rmse",
"# selected main effects",
"# selected interactions")
result <- matrix(NA, nrow = length(measure_name),
ncol = length(method_name))
rownames(result) <- measure_name
colnames(result) <- method_name
out <- list()
## Training starts
idx_method <- 1
num_keep <- min(p, ceiling(n / log(n)))
out[[idx_method]] <- sprintr::sis_lasso(x = X_train, y = y_train, num_keep = num_keep)
idx_method
j <- 1
# prediction
result[1, j] <- sqrt(mean((as.numeric(predict(object = out[[j]], newdata = X_test)) - y_test)^2))
result
rm(list = ls())
library(sprintr)
load("./rawData/data.RData")
load("out.RData")
# we use presense-absense instead of count for now
X <- X_bin
X_train <- X[idx_train, ]
set.seed(123)
idx_train <- sample(nrow(X_bin), size = ceiling(0.1 * nrow(X_bin)), replace = FALSE)
# we use presense-absense instead of count for now
X <- X_bin
X_train <- X[idx_train, ]
X_test <- X[-idx_train, ]
X_train <- X[idx_train, which(colSums(X_train) != 0)]
X_test <- X[-idx_train, which(colSums(X_train) != 0)]
y_train <- rating_all_final[idx_train]
y_test <- rating_all_final[-idx_train]
name <- colnames(X_train)
# out[[5]] is the result of sprinter
mod <- out[[6]]
me <- mod$compact[mod$compact[, 1] == 0, , drop = FALSE]
inter <- mod$compact[mod$compact[, 1] != 0, , drop = FALSE]
main <- data.frame(names = c(name[me[, 2]]), est = me[, 3])
main <- main[order(main$est), ]
int <- data.frame(names = paste(name[inter[, 1]], "*", name[inter[, 2]]), est = inter[, 3])
int <- int[order(int$est), ]
main
head(main, 10)
head(main, 10)
tail(main, 10)
tail(main, 5)
head(main, 5)
head(int, 10)
tail(int, 10)
result
load("~/Desktop/Numerical_studies/inter_newnew/TripAdvisor/result.RData")
result
t(result)
setwd("~/Desktop/Numerical_studies/inter_newnew/TripAdvisor")
source('~/Desktop/Numerical_studies/inter_newnew/TripAdvisor/tripAdvisor.R', echo=TRUE)
result
colnames(X_train)
save(result, name = colnames(X_train), file = "result.RData")
var <- colnames(X_train)
save(result, var, file = "result.RData")
save(out, file = "out.RData")
result
t(result)
