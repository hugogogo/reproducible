# multiple knockoff
w <- sample(2:m, size = m, replace = TRUE)
upper_w <- max(w / log(w - 0.5))
# regular knockoff case
upper_r <- 1 / log(2 - alpha)
upper_w
upper_r
-log(0.2)
-log(0.2)
2/log(1.5)
77.11 + 76.71
153.82 / 2
f <- function(x){-(x+1)*e^{-x} + 1}
lines(f, x = seq(0, 100))
plot(f)
curve(expr = f, from = 0, to = 100)
f <- function(x){-(x+1)*exp(-x) + 1}
curve(expr = f, from = 0, to = 100)
f <- function(x){-(x*0.1+1)*exp(-x*0.1) + 1}
curve(expr = f, from = 0, to = 100)
4 * sqrt(2) * sqrt(sqrt(2))
Gamma(2)
?gamma
gamma(2)
makep=function(x){
p=ncol(x)
pp=p*(p-1)/2
xx=matrix(NA,n,pp)
ii=0
for(i in 1:(p-1)){
for(j in (i+1):p){
ii=ii+1
xx[,ii]=x[,i]*x[,j]
}}
return(xx)
}
perm=function(x,y,nperm=10){
ccstar=NULL
for(ii in 1:nperm){
ystar=sample(y,size=length(y))
ccstar=c(ccstar,abs(cor(x,ystar)))
}
return(ccstar)
}
set.seed(44)
n=100
p=50
sigma=.1
nsim=20
res=rep(NA,nsim)
x=matrix(rnorm(n*p),n,p)
beta=rep(0,p)
gam=0
mu=x%*%beta+x[,1]*x[,2]*gam
y=mu+sigma*rnorm(n)
mu
y
xx=makep(x)
xx
xx[1, ]
a=cv.glmnet(x,y,standardize=F,keep=T)
nz0=predict(a,type="non",s=a$lambda.min)
yhat=predict(a,x,s=a$lambda.min)
r=y-yhat
ran=abs(cor(xx,r))
library(glmnet)
a=cv.glmnet(x,y,standardize=F,keep=T)
nz0=predict(a,type="non",s=a$lambda.min)
yhat=predict(a,x,s=a$lambda.min)
r=y-yhat
ran=abs(cor(xx,r))
ran
oo=which(rank(ran)>length(ran)-50)  #choose top 50
oo
ran[oo]
ran[-oo]
min(ran[00]) - max(ran[-oo])
min(ran[oo]) - max(ran[-oo])
aa=cv.glmnet(cbind(x,xx[,oo]),y,standardize=F)
nz=predict(aa,type="non",s=aa$lambda.min)
res[ii]=length(nz$X1) #record # of variables in chosen model
for(ii in 1:nsim){
x=matrix(rnorm(n*p),n,p)
beta=rep(0,p)
gam=0
mu=x%*%beta+x[,1]*x[,2]*gam
y=mu+sigma*rnorm(n)
xx=makep(x)
a=cv.glmnet(x,y,standardize=F,keep=T)
nz0=predict(a,type="non",s=a$lambda.min)
yhat=predict(a,x,s=a$lambda.min)
r=y-yhat
ran=abs(cor(xx,r))
oo=which(rank(ran)>length(ran)-50)  #choose top 50
aa=cv.glmnet(cbind(x,xx[,oo]),y,standardize=F)
nz=predict(aa,type="non",s=aa$lambda.min)
res[ii]=length(nz$X1) #record # of variables in chosen model
}
mean(res)  #51.5
mod <- cv.sprinter(x = x, y = y, square = FALSE)
library(sprintr)
res2=rep(NA,nsim)
x=matrix(rnorm(n*p),n,p)
beta=rep(0,p)
gam=0
mu=x%*%beta+x[,1]*x[,2]*gam
set.seed(123)
y=mu+sigma*rnorm(n)
mod <- cv.sprinter(x = x, y = y, square = FALSE)
mod$compact
library(sprintr)
res3=rep(NA,nsim)
x=matrix(rnorm(n*p),n,p)
beta=rep(0,p)
gam=0
mu=x%*%beta+x[,1]*x[,2]*gam
set.seed(123)
for(i in seq(nsim)){
y=mu+sigma*rnorm(n)
mod <- cv.sprinter(x = x, y = y, square = FALSE)
res3[i] <- nrow(mod$compact[mod$compact[, 1] != 0, ])
}
y=mu+sigma*rnorm(n)
mod <- cv.sprinter(x = x, y = y, square = FALSE)
mod$compact[mod$compact[, 1] != 0, ]
res3[i] <- nrow(mod$compact[mod$compact[, 1] != 0, ])
res3[i] <- nrow(as.matrix(mod$compact[mod$compact[, 1] != 0, ]))
res3[i]
y=mu+sigma*rnorm(n)
mod <- cv.sprinter(x = x, y = y, square = FALSE)
res3[i] <- nrow(mod$compact[mod$compact[, 1] != 0, , drop = FALSE])
res3[i]
i
y=mu+sigma*rnorm(n)
mod <- cv.sprinter(x = x, y = y, square = FALSE)
mod$call
mod$compact
library(sprintr)
x=matrix(rnorm(n*p),n,p)
beta=rep(0,p)
gam=0
mu=x%*%beta+x[,1]*x[,2]*gam
set.seed(123)
for(i in seq(nsim)){
y=mu+sigma*rnorm(n)
mod <- cv.sprinter(x = x, y = y, square = FALSE)
res3[i] <- nrow(mod$compact[mod$compact[, 1] != 0, , drop = FALSE])
}
res
res3
mean(res3)
log(0.000001)
log(0.001)
library(glmnet)
?glmnet
x=matrix(rnorm(100*20),100,20)
y=rnorm(100)
fit1=glmnet(x,y)
x[, 1] <- 2*x[, 1]
fit2=glmnet(x,y)
fit1$beta
fit1$beta[1, ]
fit2$beta[2, ]
library(glmnet)
x=matrix(rnorm(100*20),100,20)
y <- x[, 1] * 2 + x[, 3] * (-2) + rnorm(100)
fit1 <- glmnet(x = x, y = y)
x[, 1] <- 2 * x[, 1]
fit2 <- glmnet(x = x, y = y, lambda = fit1$lambda)
fit1$beta[1, ]
fit2$beta[2, ]
fit2$beta[1, ]
fit1$beta[1, ]
fit1$beta[1, ] * 2 - fit2$beta[1, ]
fit2$beta[1, ] * 2 - fit1$beta[1, ]
x=matrix(rnorm(100*1),100,1)
y <- x * 2 + rnorm(100)
fit1=glmnet(x,y)
x=matrix(rnorm(100*2),100,2)
y <- x[1, ] * 2 + rnorm(100)
fit1=glmnet(x,y)
z <- x
z[, 1] <-  2 * x[, 1]
fit2 <- glmnet(z, y, lambda = fit1$lambda)
fit2$beta[1, ]
fit1$beta[1, ]
fit1$beta[1, ] / 2 - fit2$beta[1, ]
fit1=glmnet(x,y, lambda = c(0.2, 0.1))
fit1$beta[1, ]
fit2$lambda
fit2$beta[1, ]
fit1=glmnet(x,y, lambda = c(0.02, 0.01))
fit2 <- glmnet(z, y, lambda = c(0.002, 0.001))
fit1=glmnet(x,y, lambda = c(0.002, 0.001))
fit1$beta[1, ]
fit2$beta[1, ]
fit1=glmnet(x,y, lambda = c(0.002, 0.001), intercept = FALSE)
fit2 <- glmnet(z, y, lambda = c(0.002, 0.001), intercept = FALSE)
fit1$beta[1, ]
fit2$beta[2, ]
fit2$beta[1, ]
fit2$beta[1, ] * 2 - fit1$beta[1, ]
source('~/Desktop/play.R', echo=TRUE)
source('~/Desktop/play.R', echo=TRUE)
source('~/Desktop/play.R', echo=TRUE)
source('~/Desktop/play.R', echo=TRUE)
source('~/Desktop/play.R', echo=TRUE)
b1
source('~/Desktop/play.R', echo=TRUE)
b1
b2
b1/2
b2
crossprod(x, y)
(as.numeric(crossprod(x, y)) - lambda) / crossprod(x)
(as.numeric(crossprod(x, y)) - lambda) / as.numeric(crossprod(x))
b1
(as.numeric(crossprod(x2, y)) - lambda) / as.numeric(crossprod(x2))
(2 * as.numeric(crossprod(x, y)) + lambda) / as.numeric(4 * crossprod(x))
lambda <- 0.2
# 3.637205
b1 <- soft(x, y, lambda)
b1
# 3.637235
(as.numeric(crossprod(x, y)) - lambda) / as.numeric(crossprod(x))
lambda <- 0.5
# 3.637235
(as.numeric(crossprod(x, y)) - lambda) / as.numeric(crossprod(x))
# 3.637205
b1 <- soft(x, y, lambda)
b1
x2 <- 2 * x
(as.numeric(crossprod(x2, y)) - lambda) / as.numeric(crossprod(x2))
(2 * as.numeric(crossprod(x, y)) + lambda) / as.numeric(4 * crossprod(x))
b2 <- soft(x2, y, lambda)
b2
b1 / 2 - b2
lambda <- 1
# 3.637205
b1 <- soft(x, y, lambda)
b1
x2 <- 2 * x
b2 <- soft(x2, y, lambda)
b1 / 2 - b2
lambda <- 2
# 3.637205
b1 <- soft(x, y, lambda)
b2 <- soft(x2, y, lambda)
b1 / 2 - b2
b1 <- soft(x, y, lambda)
b1 - (as.numeric(crossprod(x, y)) - lambda) / as.numeric(crossprod(x))
x2 <- 2 * x
(2 * as.numeric(crossprod(x, y)) + lambda) / as.numeric(4 * crossprod(x))
b2 <- soft(x2, y, lambda)
b2
crossprod(x, y)
x2 <- 2 * x
as.numeric((crossprod(x2, y) - lambda) / crossprod(x2))
as.numeric((2 * crossprod(x, y) - lambda) / 4 * crossprod(x))
as.numeric((2 * crossprod(x, y) - lambda) / (4 * crossprod(x)))
as.numeric((crossprod(x2, y) - lambda) / crossprod(x2))
# showing what I derived is correct
b2 - as.numeric((2 * crossprod(x, y) - lambda) / (4 * crossprod(x)))
# showing the difference
b1 / 2 - b2
source('~/Desktop/play.R', echo=TRUE)
source('~/Desktop/play.R', echo=TRUE)
source('~/Desktop/play.R', echo=TRUE)
soft2 <- function(x, y, lambda){
# construct optimization variable beta
beta <- Variable(2)
# objective definition
obj <- Minimize(sum_squares(y - x %*% beta) / 2 + lambda * p_norm(beta, 1))
prob <- Problem(objective = obj)
result <- psolve(prob)
return(result$getValue(beta))
}
set.seed(123)
n <- 100
x <- matrix(rnorm(n * 2), n , 2)
y <- x[, 1] * 1 + x[, 2] * 2 + rnorm(n)
lambda <- 1
# lasso solution from CVXR
b1 <- soft2(x, y, lambda)
b1
x2[, 1] <- 2 * x[, 1]
# now make design twice as large
x2 <- x
x2[, 1] <- 2 * x[, 1]
x2
x
# lasso solution from CVXR
b2 <- soft(x2, y, lambda)
# lasso solution from CVXR
b2 <- soft2(x2, y, lambda)
b2
# showing the difference between b1 / 2 and b2
b1 / 2 - b2
# showing the difference between b1 / 2 and b2
b1[1] / 2 - b2[1]
source('~/Desktop/play.R', echo=TRUE)
source('~/Desktop/play.R', echo=TRUE)
b1
b2
remove.packages("Rcade")
remove.packages(Rcade)
p <- 7787
2 * p + p * (p - 1) / 2
n <- 209987
q <- 2 * p + p * (p - 1) / 2
n * q
n * q / 1024 / 1024 / 1024
n * q / 1024 / 1024 / 1024 * 8 * 3
n * q / 1024 / 1024 / 1024 * 8 * 3 / 1000
rm(list = ls())
getz <- function(x, y){
result <- matrix(NA, length(x), length(y))
for(i in seq(length(x))){
for(j in seq(length(y))){
result[i, j] <- (x[i] - 0.5) * (y[j] - 0.5)
}
}
return(result)
}
getz2 <- function(x, y){
result <- matrix(NA, length(x), length(y))
for(i in seq(length(x))){
for(j in seq(length(y))){
result[i, j] <- (x[i] - 0.5)^2
}
}
return(result)
}
x <- seq(-0.5, 1.5, length.out = 100)
y <- seq(-0.5, 1.5, length.out = 100)
z <- getz(x, y)
z2 <- getz2(x, y)
set.seed(123)
idx <- sample(100, 10)
zz <- diag(z)[idx]
zz <- zz + rnorm(length(zz), sd = 0.1)
xlab <- expression(x[1])
ylab <- expression(x[2])
plot3D::persp3D(x = x, y = y, z = z, colkey = FALSE, phi = 20, theta = -20, xlab = xlab, ylab = ylab, zlab = "y", main = expression(y == (x[1] - 0.5)(x[2] - 0.5)))
plot3D::points3D(x = x[idx], y = y[idx], z = zz, add = TRUE, col = rep("black", length(zz)), pch = 16, colkey = FALSE)
plot3D::persp3D(x = x, y = y, z = z2, colkey = FALSE, phi = 15, theta = -5, xlab = xlab, ylab = ylab, zlab = "y", main = expression(y == (x[1] - 0.5)^2))
plot3D::persp3D(x = x, y = y, z = z2, colkey = FALSE, phi = 15, theta = -10, xlab = xlab, ylab = ylab, zlab = "y", main = expression(y == (x[1] - 0.5)^2))
plot3D::persp3D(x = x, y = y, z = z2, colkey = FALSE, phi = 15, theta = -15, xlab = xlab, ylab = ylab, zlab = "y", main = expression(y == (x[1] - 0.5)^2))
plot3D::persp3D(x = x, y = y, z = z2, colkey = FALSE, phi = 15, theta = -20, xlab = xlab, ylab = ylab, zlab = "y", main = expression(y == (x[1] - 0.5)^2))
plot3D::points3D(x = x[idx], y = y[idx], z = zz, add = TRUE, col = rep("black", length(zz)), pch = 16, colkey = FALSE)
plot3D::persp3D(x = x, y = y, z = z, colkey = FALSE, phi = 20, theta = -20, xlab = xlab, ylab = ylab, zlab = "y", main = expression(y == (x[1] - 0.5)(x[2] - 0.5)))
plot3D::points3D(x = x[idx], y = y[idx], z = zz, add = TRUE, col = rep("black", length(zz)), pch = 16, colkey = FALSE)
plot3D::persp3D(x = x, y = y, z = z2, colkey = FALSE, phi = 15, theta = -20, xlab = xlab, ylab = ylab, zlab = "y", main = expression(y == (x[1] - 0.5)^2))
plot3D::points3D(x = x[idx], y = y[idx], z = zz, add = TRUE, col = rep("black", length(zz)), pch = 16, colkey = FALSE)
library(xyz)
a <- c(4, 6, 4, 3, 5, 4, 5, 8, 4, 7)
a - mean(a)
sum((a - mean(a))^2)
1.44/2.4
6.4*0.08
f <- function(x) {x^2 + 2 * x + 1 / ((1 + x)^2) - 1}
plot(f)
plot(f, from = -100, to = 100)
plot(f, from = -1, to = 1)
plot(f, from = -0.1, to = 1)
plot(f, from = -0.1, to = 0.2)
solve(f)
uniroot(f)
uniroot(f, -10, 10)
uniroot(f, c(-10, 10))
f <- function(x){x^2 + 2 * x}
g <- function(x){1 - 1/ ((x+1)^2)}
plot(f)
plot(f, -10, 8)
lines(g)
lines(g, x = (-10, 8))
lines(g, -10, 8)
lines(x = c(-10, 8), y = g(range(-10, 8)))
range(-10, 8)
lines(x = c(-10, 8), y = g(esq(-10, 8)))
lines(x = c(-10, 8), y = g(seq(-10, 8)))
seq(-10, 89)
x <- seq(-10, 8)
y <- f(x)
yy <- g(x)
plot(x, y)
plot(x, y, type = "line")
lines(x, yy)
x <- seq(-3, 2)
y <- f(x)
yy <- g(x)
plot(x, y)
plot(x, y, type = "l")
lines(x, yy)
x <- seq(-3, 2, length.out = 10000)
y <- f(x)
yy <- g(x)
plot(x, y, type = "l")
lines(x, yy)
x <- seq(-2.5, 1.5, length.out = 100000)
y <- f(x)
yy <- g(x)
plot(x, y, type = "l")
x
plot(x, y)
range(x)
x <- seq(-2.5, -1.5, length.out = 10000)
y <- f(x)
yy <- g(x)
plot(x, y)
lines(x, yy)
x <- seq(-2.2, -1.5, length.out = 10000)
y <- f(x)
yy <- g(x)
plot(x, y, type = "l")
lines(x, yy)
x <- seq(-2.01, -1.99, length.out = 100000)
x
y <- f(x)
yy <- g(x)
plot(x, y, type = "l")
lines(x, yy)
library(knockoff)
install.packages("~/Desktop/lean_0.1.0.tar.gz", repos = NULL, type = "source")
source('~/Desktop/Numerical_studies/interactions_new/binary/Sigma/binary_tree.R', echo=TRUE)
a <- make_perfect_binary_tree(depth = 5)
a
b <- compute_nonleaf_node_value(a)
b
load("~/Desktop/Numerical_studies/interactions/binary/binary/files/sim-binary.Rdata")
ls()
rm(list = ls())
load("~/Desktop/Numerical_studies/interactions/binary/binary/files/sim-binary.Rdata")
ls()
sim
m <- model(sim)
setwd("~/Desktop/Numerical_studies/interactions_new/binary/binary")
m <- model(sim)
m
m[[1]]
m[[1]]@params$x_raw
m[[1]]@params$type
m[[1]]@params$beta
m[[1]]@params$theta
m[[1]]@params$vartheta
m[[1]]@params$gamma
m[[1]]@params$compact
m[[1]]@params$signal_beta
m[[1]]@params$snr
m[[1]]@params$prob
m[[1]]@params$vartheta
m[[1]]@params$theta
m[[1]]@params$beta
m[[1]]@params$gamma
m[[1]]@params$mir
m[[1]]@params$x_raw
load("~/Desktop/Numerical_studies/interactions/binary/binary/files/sim-binary_100.Rdata")
m <- model(sim)
m[[1]]
m[[1]]@params$vartheta
m[[1]]@params$theta
m[[1]]@params$beta
m[[1]]@params$gamma
m[[1]]@params$compact
m[[1]]@params$compact
setwd("~/Desktop/Numerical_studies/interactions_new/binary/binary")
setwd("~/Desktop/Numerical_studies/interactions_new/binary/binary")
source("../Sigma/binary_tree.R")
m[[1]]@params$compact
d <- 5
n <- 100
# d is the depth of the perfect binary tree
# i.e., there are p = 2^(d + 1) - 1 nodes in the tree
# which is the number of main effects.
btree <- make_perfect_binary_tree(depth = d)
source("../Sigma/binary_tree.R")
# d is the depth of the perfect binary tree
# i.e., there are p = 2^(d + 1) - 1 nodes in the tree
# which is the number of main effects.
btree <- make_perfect_binary_tree(depth = d)
p <- nrow(btree)
q <- (p^2 + p) / 2
p
leaf_nodes <- btree[btree$Depth == max(btree$Depth), ]$NodeId
leaf_nodes
idx <- rbind(cbind(seq(p), seq(p)), t(combn(p, 2)))
idx
x <- matrix(NA, nrow = 2 * n, ncol = p)
n_leaf_node <- length(leaf_nodes)
n_leaf_nodes
n_leaf_node
prob <- 0.1
leaf_idx <- which(btree$NodeId %in% leaf_nodes)
for(i in seq(2 * n)){
# make sure that everytime values in tree nodes are zero
btree$Value <- 0
# randomly draw 0, 1 values in leaf nodes
btree[leaf_idx, ]$Value <- rbinom(n = n_leaf_node, size = 1, prob = prob)
btree <- compute_nonleaf_node_value(btree = btree)
x[i, ] <- btree$Value
}
x
load("../tree_model/parameter.Rdata")
ls()
source('~/Desktop/Numerical_studies/interactions_new/binary/tree_model/compute_parameter.R', echo=TRUE)
setwd("~/Desktop/Numerical_studies/interactions_new/binary/tree_model")
source('~/Desktop/Numerical_studies/interactions_new/binary/tree_model/compute_parameter.R', echo=TRUE)
source('~/Desktop/Numerical_studies/interactions_new/binary/tree_model/compute_parameter.R', echo=TRUE)
source('~/Desktop/Numerical_studies/interactions_new/binary/tree_model/compute_parameter.R', echo=TRUE)
ls()
load("~/Desktop/Numerical_studies/interactions_new/binary/tree_model/parameter.Rdata")
parameter$btree_avg
