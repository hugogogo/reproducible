# and we make theta to be sparse
num_main <- 5
oo <- order(abs(vartheta), decreasing = TRUE)
pos[[1]] <- oo
beta <- rep(0, p)
beta[tail(oo, -num_main)] <- -vartheta[tail(oo, -num_main)]
beta[head(oo, num_main)] <- -vartheta[head(oo, num_main)] * 0.7
# theta
theta <- beta + vartheta
theta
# combine compact representation
compact <- rbind(cbind(rep(0, length(pos[[1]])), pos[[1]], beta[pos[[1]]]), compact_it)
colnames(compact) <- c("index_1", "index_2", "coefficient")
tt <- t(combn(p, 2))
# training signals
x_tr <- x[1:n_tr, ]
z_tr <- cbind(x_tr^2, x_tr[, tt[, 1]] * x_tr[, tt[, 2]])
w_tr <- z_tr - x_tr %*% solve(Sigma) %*% Phi
signal_beta <- as.numeric(x_tr[, pos[[1]]] %*% beta[pos[[1]]])
signal_gamma <- as.numeric(z_tr[, pos[[3]]] %*% gamma[pos[[3]]])
signal_main <- as.numeric(x_tr %*% theta)
signal_int <- as.numeric(w_tr[, pos[[3]]] %*% gamma[pos[[3]]])
# overall training signal
mu_tr <- signal_main + signal_int
stopifnot(max(abs(mu_tr - signal_beta - signal_gamma)) < 1e-10)
# main-interaction ration
mir <- mean(signal_main^2) / mean(signal_int^2)
mir
beta
# all interactions are made by a pair of main effects
# that are in different sub-trees
compact_it <- rbind(c(2, 5), c(4, 7), c(9, 22), c(26, 31), c(7, 17), c(32, 33), c(61, 62))
ga <- rep(3, nrow(compact_it))
compact_it <- cbind(compact_it, ga)
pos <- list()
pos[[2]] <- integer(0)
pos[[3]] <- sprintr::extract_inter_indices(compact_it[, 1:2], p) - p
gamma <- rep(0, q)
gamma[pos[[3]]] <- ga
# compute population signals
# grab Monte-Carlo estimate of population covariances
Sigma <- parameter$Sigma
Phi <- parameter$Phi
# vartheta
vartheta <- as.numeric(solve(Sigma, Phi[, pos[[3]]] %*% gamma[pos[[3]]]))
# specifying main effects
# we define main effects to "counter" those from vartheta in order to control mir
# and we make theta to be sparse
num_main <- 5
oo <- order(abs(vartheta), decreasing = TRUE)
pos[[1]] <- oo
beta <- rep(0, p)
beta[tail(oo, -num_main)] <- -vartheta[tail(oo, -num_main)]
beta[head(oo, num_main)] <- -vartheta[head(oo, num_main)] * 0.8
# theta
theta <- beta + vartheta
# combine compact representation
compact <- rbind(cbind(rep(0, length(pos[[1]])), pos[[1]], beta[pos[[1]]]), compact_it)
colnames(compact) <- c("index_1", "index_2", "coefficient")
tt <- t(combn(p, 2))
# training signals
x_tr <- x[1:n_tr, ]
z_tr <- cbind(x_tr^2, x_tr[, tt[, 1]] * x_tr[, tt[, 2]])
w_tr <- z_tr - x_tr %*% solve(Sigma) %*% Phi
signal_beta <- as.numeric(x_tr[, pos[[1]]] %*% beta[pos[[1]]])
signal_gamma <- as.numeric(z_tr[, pos[[3]]] %*% gamma[pos[[3]]])
signal_main <- as.numeric(x_tr %*% theta)
signal_int <- as.numeric(w_tr[, pos[[3]]] %*% gamma[pos[[3]]])
# overall training signal
mu_tr <- signal_main + signal_int
stopifnot(max(abs(mu_tr - signal_beta - signal_gamma)) < 1e-10)
# main-interaction ration
mir <- mean(signal_main^2) / mean(signal_int^2)
mir
# most of the interactions are made by a pair of main effects
# where one main effect is ancester/descendant of the other
#compact_it <- rbind(c(4, 16), c(5, 22), c(26, 53), c(6, 12), c(13, 14))
compact_it <- rbind(c(4, 16), c(5, 22), c(13, 14))
ga <- rep(3, nrow(compact_it))
compact_it <- cbind(compact_it, ga)
pos <- list()
pos[[2]] <- integer(0)
pos[[3]] <- sprintr::extract_inter_indices(compact_it[, 1:2], p) - p
gamma <- rep(0, q)
gamma[pos[[3]]] <- ga
# compute population signals
# grab Monte-Carlo estimate of population covariances
Sigma <- parameter$Sigma
Phi <- parameter$Phi
# vartheta
vartheta <- as.numeric(solve(Sigma, Phi[, pos[[3]]] %*% gamma[pos[[3]]]))
# specifying main effects
# we define main effects to "counter" those from vartheta in order to control mir
# and we make theta to be sparse
num_main <- 5
oo <- order(abs(vartheta), decreasing = TRUE)
pos[[1]] <- oo
beta <- rep(0, p)
beta[tail(oo, -num_main)] <- -vartheta[tail(oo, -num_main)]
# there are a pair of independent main effects
beta[head(oo, num_main)] <- 0
beta
# theta
theta <- beta + vartheta
theta
# combine compact representation
compact <- rbind(cbind(rep(0, length(pos[[1]])), pos[[1]], beta[pos[[1]]]), compact_it)
colnames(compact) <- c("index_1", "index_2", "coefficient")
tt <- t(combn(p, 2))
# training signals
x_tr <- x[1:n_tr, ]
z_tr <- cbind(x_tr^2, x_tr[, tt[, 1]] * x_tr[, tt[, 2]])
w_tr <- z_tr - x_tr %*% solve(Sigma) %*% Phi
signal_beta <- as.numeric(x_tr[, pos[[1]]] %*% beta[pos[[1]]])
signal_gamma <- as.numeric(z_tr[, pos[[3]]] %*% gamma[pos[[3]]])
signal_main <- as.numeric(x_tr %*% theta)
signal_int <- as.numeric(w_tr[, pos[[3]]] %*% gamma[pos[[3]]])
# overall training signal
mu_tr <- signal_main + signal_int
stopifnot(max(abs(mu_tr - signal_beta - signal_gamma)) < 1e-10)
# main-interaction ration
mir <- mean(signal_main^2) / mean(signal_int^2)
mir
1/15
# half of the interactions are made by a pair of main effects
# where one main effect is ancestor/descendant of the other
# and half of the interactions are made by a pair of main effects
# that are in different sub-trees
compact_it <- rbind(c(8, 17), c(10, 21), c(3, 50), c(26, 31), c(7, 17), c(32, 33))
ga <- rep(3, nrow(compact_it))
compact_it <- cbind(compact_it, ga)
pos <- list()
pos[[2]] <- integer(0)
pos[[3]] <- sprintr::extract_inter_indices(compact_it[, 1:2], p) - p
gamma <- rep(0, q)
gamma[pos[[3]]] <- ga
# compute population signals
# grab Monte-Carlo estimate of population covariances
Sigma <- parameter$Sigma
Phi <- parameter$Phi
# vartheta
vartheta <- as.numeric(solve(Sigma, Phi[, pos[[3]]] %*% gamma[pos[[3]]]))
# specifying main effects
# we define main effects to "counter" those from vartheta in order to control mir
# and we make theta to be sparse
num_main <- 5
oo <- order(abs(vartheta), decreasing = TRUE)
pos[[1]] <- oo
beta <- rep(0, p)
beta[tail(oo, -num_main)] <- -vartheta[tail(oo, -num_main)]
beta[head(oo, num_main)] <- -vartheta[head(oo, num_main)] * 0.7
# theta
theta <- beta + vartheta
theta
# combine compact representation
compact <- rbind(cbind(rep(0, length(pos[[1]])), pos[[1]], beta[pos[[1]]]), compact_it)
colnames(compact) <- c("index_1", "index_2", "coefficient")
tt <- t(combn(p, 2))
# training signals
x_tr <- x[1:n_tr, ]
z_tr <- cbind(x_tr^2, x_tr[, tt[, 1]] * x_tr[, tt[, 2]])
w_tr <- z_tr - x_tr %*% solve(Sigma) %*% Phi
signal_beta <- as.numeric(x_tr[, pos[[1]]] %*% beta[pos[[1]]])
signal_gamma <- as.numeric(z_tr[, pos[[3]]] %*% gamma[pos[[3]]])
signal_main <- as.numeric(x_tr %*% theta)
signal_int <- as.numeric(w_tr[, pos[[3]]] %*% gamma[pos[[3]]])
# overall training signal
mu_tr <- signal_main + signal_int
stopifnot(max(abs(mu_tr - signal_beta - signal_gamma)) < 1e-10)
# main-interaction ration
mir <- mean(signal_main^2) / mean(signal_int^2)
mir
#beta[head(oo, num_main)] <- -vartheta[head(oo, num_main)] * 0.7
beta[head(oo, num_main)] <- 0
beta
beta[head(oo, num_main)] <- -vartheta[head(oo, num_main)] * 0.7
beta
# theta
theta <- beta + vartheta
theta
# half of the interactions are made by a pair of main effects
# where one main effect is ancestor/descendant of the other
# and half of the interactions are made by a pair of main effects
# that are in different sub-trees
#compact_it <- rbind(c(8, 17), c(10, 21), c(3, 50), c(26, 31), c(7, 17), c(32, 33))
compact_it <- rbind(c(8, 17), c(10, 21), c(26, 31), c(7, 17))
ga <- rep(3, nrow(compact_it))
compact_it <- cbind(compact_it, ga)
pos <- list()
pos[[2]] <- integer(0)
pos[[3]] <- sprintr::extract_inter_indices(compact_it[, 1:2], p) - p
gamma <- rep(0, q)
gamma[pos[[3]]] <- ga
# compute population signals
# grab Monte-Carlo estimate of population covariances
Sigma <- parameter$Sigma
Phi <- parameter$Phi
# vartheta
vartheta <- as.numeric(solve(Sigma, Phi[, pos[[3]]] %*% gamma[pos[[3]]]))
# specifying main effects
# we define main effects to "counter" those from vartheta in order to control mir
# and we make theta to be sparse
num_main <- 5
oo <- order(abs(vartheta), decreasing = TRUE)
pos[[1]] <- oo
beta <- rep(0, p)
beta[tail(oo, -num_main)] <- -vartheta[tail(oo, -num_main)]
beta[head(oo, num_main)] <- -vartheta[head(oo, num_main)] * 0.7
# theta
theta <- beta + vartheta
theta
# combine compact representation
compact <- rbind(cbind(rep(0, length(pos[[1]])), pos[[1]], beta[pos[[1]]]), compact_it)
colnames(compact) <- c("index_1", "index_2", "coefficient")
tt <- t(combn(p, 2))
# training signals
x_tr <- x[1:n_tr, ]
z_tr <- cbind(x_tr^2, x_tr[, tt[, 1]] * x_tr[, tt[, 2]])
w_tr <- z_tr - x_tr %*% solve(Sigma) %*% Phi
signal_beta <- as.numeric(x_tr[, pos[[1]]] %*% beta[pos[[1]]])
signal_gamma <- as.numeric(z_tr[, pos[[3]]] %*% gamma[pos[[3]]])
signal_main <- as.numeric(x_tr %*% theta)
signal_int <- as.numeric(w_tr[, pos[[3]]] %*% gamma[pos[[3]]])
# overall training signal
mu_tr <- signal_main + signal_int
stopifnot(max(abs(mu_tr - signal_beta - signal_gamma)) < 1e-10)
# main-interaction ration
mir <- mean(signal_main^2) / mean(signal_int^2)
mir
# all interactions are made by a pair of main effects
# that are in different sub-trees
#compact_it <- rbind(c(2, 5), c(4, 7), c(9, 22), c(26, 31), c(7, 17), c(32, 33), c(61, 62))
compact_it <- rbind(c(2, 5), c(4, 7), c(9, 22), c(61, 62))
ga <- rep(3, nrow(compact_it))
compact_it <- cbind(compact_it, ga)
pos <- list()
pos[[2]] <- integer(0)
pos[[3]] <- sprintr::extract_inter_indices(compact_it[, 1:2], p) - p
gamma <- rep(0, q)
gamma[pos[[3]]] <- ga
# compute population signals
# grab Monte-Carlo estimate of population covariances
Sigma <- parameter$Sigma
Phi <- parameter$Phi
# vartheta
vartheta <- as.numeric(solve(Sigma, Phi[, pos[[3]]] %*% gamma[pos[[3]]]))
# specifying main effects
# we define main effects to "counter" those from vartheta in order to control mir
# and we make theta to be sparse
num_main <- 5
oo <- order(abs(vartheta), decreasing = TRUE)
pos[[1]] <- oo
beta <- rep(0, p)
beta[tail(oo, -num_main)] <- -vartheta[tail(oo, -num_main)]
beta[head(oo, num_main)] <- -vartheta[head(oo, num_main)] * 0.8
# theta
theta <- beta + vartheta
theta
# combine compact representation
compact <- rbind(cbind(rep(0, length(pos[[1]])), pos[[1]], beta[pos[[1]]]), compact_it)
colnames(compact) <- c("index_1", "index_2", "coefficient")
tt <- t(combn(p, 2))
# training signals
x_tr <- x[1:n_tr, ]
z_tr <- cbind(x_tr^2, x_tr[, tt[, 1]] * x_tr[, tt[, 2]])
w_tr <- z_tr - x_tr %*% solve(Sigma) %*% Phi
signal_beta <- as.numeric(x_tr[, pos[[1]]] %*% beta[pos[[1]]])
signal_gamma <- as.numeric(z_tr[, pos[[3]]] %*% gamma[pos[[3]]])
signal_main <- as.numeric(x_tr %*% theta)
signal_int <- as.numeric(w_tr[, pos[[3]]] %*% gamma[pos[[3]]])
# overall training signal
mu_tr <- signal_main + signal_int
stopifnot(max(abs(mu_tr - signal_beta - signal_gamma)) < 1e-10)
# main-interaction ration
mir <- mean(signal_main^2) / mean(signal_int^2)
mir
# most of the interactions are made by a pair of main effects
# where one main effect is ancester/descendant of the other
#compact_it <- rbind(c(4, 16), c(5, 22), c(26, 53), c(6, 12), c(13, 14))
compact_it <- rbind(c(4, 16), c(5, 22), c(13, 14))
ga <- rep(3, nrow(compact_it))
compact_it <- cbind(compact_it, ga)
pos <- list()
pos[[2]] <- integer(0)
pos[[3]] <- sprintr::extract_inter_indices(compact_it[, 1:2], p) - p
gamma <- rep(0, q)
gamma[pos[[3]]] <- ga
# compute population signals
# grab Monte-Carlo estimate of population covariances
Sigma <- parameter$Sigma
Phi <- parameter$Phi
# vartheta
vartheta <- as.numeric(solve(Sigma, Phi[, pos[[3]]] %*% gamma[pos[[3]]]))
# specifying main effects
# we define main effects to "counter" those from vartheta in order to control mir
# and we make theta to be sparse
num_main <- 5
oo <- order(abs(vartheta), decreasing = TRUE)
pos[[1]] <- oo
beta <- rep(0, p)
beta[tail(oo, -num_main)] <- -vartheta[tail(oo, -num_main)]
# there are a pair of independent main effects
beta[head(oo, num_main)] <- -vartheta[head(oo, num_main)] * 0.5
# theta
theta <- beta + vartheta
# combine compact representation
compact <- rbind(cbind(rep(0, length(pos[[1]])), pos[[1]], beta[pos[[1]]]), compact_it)
colnames(compact) <- c("index_1", "index_2", "coefficient")
tt <- t(combn(p, 2))
# training signals
x_tr <- x[1:n_tr, ]
z_tr <- cbind(x_tr^2, x_tr[, tt[, 1]] * x_tr[, tt[, 2]])
w_tr <- z_tr - x_tr %*% solve(Sigma) %*% Phi
signal_beta <- as.numeric(x_tr[, pos[[1]]] %*% beta[pos[[1]]])
signal_gamma <- as.numeric(z_tr[, pos[[3]]] %*% gamma[pos[[3]]])
signal_main <- as.numeric(x_tr %*% theta)
signal_int <- as.numeric(w_tr[, pos[[3]]] %*% gamma[pos[[3]]])
# overall training signal
mu_tr <- signal_main + signal_int
stopifnot(max(abs(mu_tr - signal_beta - signal_gamma)) < 1e-10)
# main-interaction ration
mir <- mean(signal_main^2) / mean(signal_int^2)
mir
source('~/Desktop/Numerical_studies/inter_newnew/binary/binary_simulation/main_binary.R', echo=TRUE)
source('~/Desktop/Numerical_studies/inter_newnew/binary/binary_simulation/plot_binary.R', echo=TRUE)
source('~/Desktop/Numerical_studies/inter_newnew/binary/binary_simulation/main_binary.R', echo=TRUE)
source('~/Desktop/Numerical_studies/inter_newnew/binary/binary_simulation/plot_binary.R', echo=TRUE)
source('~/Desktop/Numerical_studies/inter_newnew/binary/binary_simulation/main_binary.R', echo=TRUE)
source('~/Desktop/Numerical_studies/inter_newnew/binary/binary_simulation/main_binary.R', echo=TRUE)
source('~/Desktop/Numerical_studies/inter_newnew/binary/binary_simulation/plot_binary.R', echo=TRUE)
source('~/Desktop/Numerical_studies/inter_newnew/binary/binary_simulation/plot_binary.R', echo=TRUE)
rm(list = ls())
library(simulator)
library(RColorBrewer)
source("../../plot_functions.R")
sim_name <- "binary"
metric_name <- "mse_pred"
sim <- load_simulation(name = sim_name)
sim
sim <- evaluate(sim, metrics = c(mse_pred, nnzm, nnzi, recall))
library(simulator)
library(sprintr)
library(glmnet)
# load in pre-computed population quantities in the binary model
# see ../generate_tree/compute_parameter.R
load("../generate_tree/parameter_d5.Rdata")
#load("../generate_tree/parameter_d6.Rdata")
source("../generate_tree/binary_tree.R")
# load in binary model generating function
source("model_binary.R")
source("../../method_functions.R")
source("../../eval_functions.R")
sim <- evaluate(sim, metrics = c(mse_pred, nnzm, nnzi, recall))
source('~/Desktop/Numerical_studies/inter_newnew/binary/binary_simulation/main_binary.R', echo=TRUE)
source('~/Desktop/Numerical_studies/inter_newnew/binary/binary_simulation/plot_binary.R', echo=TRUE)
setwd("~/Desktop/Numerical_studies/inter_newnew/Gaussian")
source('~/Desktop/Numerical_studies/inter_newnew/Gaussian/main_Gaussian.R', echo=TRUE)
source('~/Desktop/Numerical_studies/inter_newnew/Gaussian/plot_Gaussian.R', echo=TRUE)
warnings()
source('~/Desktop/Numerical_studies/inter_newnew/Gaussian/main_speed.R', echo=TRUE)
source('~/Desktop/Numerical_studies/inter_newnew/Gaussian/plot_speed.R', echo=TRUE)
rm(list = ls())
library(simulator)
library(RColorBrewer)
source("../plot_functions.R")
sim_name <- "speed"
sim <- load_simulation(name = sim_name) %>%
subset_simulation(subset = c(1, 2, 4, 5)) %>%
subset_simulation(methods = c("APL", "sprinter", "rinter"))
sim
ee <- extract_evals(sim)
ee
ea <- aggregate_evals(ee)
ea
source('~/Desktop/Numerical_studies/inter_newnew/Gaussian/main_Gaussian.R', echo=TRUE)
sim <- load_simulation("Gaussian")
setwd("~/Desktop/Numerical_studies/inter_newnew/Gaussian")
# This is the main simulator file
rm(list=ls())
library(simulator)
library(glmnet)
source("model_gaussian.R")
source("../method_functions.R")
source("../eval_functions.R")
# load in other methods implementation
source("../other_methods/apl.R")
source("../other_methods/RAMP.R")
source("../other_methods/inter_pursuit.R")
# @knitr init
name_of_simulation <- "Gaussian"
# ## @knitr main
n_tr <- 100
n_te <- 1000
p <- 400
signal_main <- 2
signal_sq <- 3
signal_int <- 3
snr_seq <- c(0.3, 0.5, 1, 1.5, 2, 2.5, 3)
sim <- load_simulation("Gaussian")
sim
source('~/Desktop/Numerical_studies/inter_newnew/Gaussian/main_Gaussian.R', echo=TRUE)
source('~/Desktop/Numerical_studies/inter_newnew/Gaussian/main_Gaussian.R', echo=TRUE)
sim
sim <- evaluate(sim, metrics = c(mse_pred, nnzm, nnzi, recall))
save_simulation(sim)
source('~/Desktop/Numerical_studies/inter_newnew/Gaussian/plot_Gaussian.R', echo=TRUE)
warnings()
source('~/Desktop/Numerical_studies/inter_newnew/Gaussian/plot_Gaussian.R', echo=TRUE)
source('~/Desktop/Numerical_studies/inter_newnew/Gaussian/plot_Gaussian.R', echo=TRUE)
source('~/Desktop/Numerical_studies/interactionnew/Gaussian/main_Gaussian.R', echo=TRUE)
source('~/Desktop/Numerical_studies/interactionnew/Gaussian/main_Gaussian.R', echo=TRUE)
plot_eval(sim)
plot_eval(sim, metric_name = "mse_pred")
source('~/Desktop/Numerical_studies/interactionnew/binary/binary_simulation/main_binary.R', echo=TRUE)
setwd("~/Desktop/Numerical_studies/interactionnew/binary/binary_simulation")
source('~/Desktop/Numerical_studies/interactionnew/binary/binary_simulation/main_binary.R', echo=TRUE)
setwd("~/Desktop/Numerical_studies/interactionnew/Gaussian")
source('~/Desktop/Numerical_studies/interactionnew/Gaussian/main_Gaussian.R', echo=TRUE)
source('~/Desktop/Numerical_studies/interactionnew/Gaussian/main_speed.R', echo=TRUE)
source('~/Desktop/Numerical_studies/interactionnew/Gaussian/plot_Gaussian.R', echo=TRUE)
source('~/Desktop/Numerical_studies/interactionnew/Gaussian/plot_Gaussian.R', echo=TRUE)
source('~/Desktop/Numerical_studies/interactionnew/Gaussian/plot_Gaussian.R', echo=TRUE)
source('~/Desktop/Numerical_studies/interactionnew/binary/binary_simulation/plot_binary.R', echo=TRUE)
setwd("~/Desktop/Numerical_studies/interactionnew/binary/binary_simulation")
source('~/Desktop/Numerical_studies/interactionnew/binary/binary_simulation/plot_binary.R', echo=TRUE)
source('~/Desktop/Numerical_studies/interactionnew/binary/binary_simulation/plot_binary.R', echo=TRUE)
source('~/Desktop/Numerical_studies/interactionnew/binary/binary_simulation/plot_binary.R', echo=TRUE)
source('~/Desktop/Numerical_studies/interactionnew/binary/binary_simulation/plot_binary.R', echo=TRUE)
source('~/Desktop/Numerical_studies/interactionnew/binary/binary_simulation/plot_binary_nnzi.R', echo=TRUE)
source('~/Desktop/Numerical_studies/interactionnew/binary/binary_simulation/plot_binary_nnzi.R', echo=TRUE)
source('~/Desktop/Numerical_studies/interactionnew/binary/binary_simulation/plot_binary_nnzi.R', echo=TRUE)
source('~/Desktop/Numerical_studies/interactionnew/Gaussian/plot_Gaussian.R', echo=TRUE)
setwd("~/Desktop/Numerical_studies/interactionnew/Gaussian")
source('~/Desktop/Numerical_studies/interactionnew/Gaussian/plot_Gaussian.R', echo=TRUE)
source('~/Desktop/Numerical_studies/interactionnew/Gaussian/plot_Gaussian.R', echo=TRUE)
source('~/Desktop/Numerical_studies/interactionnew/Gaussian/plot_speed.R', echo=TRUE)
source('~/Desktop/Numerical_studies/interactionnew/Gaussian/main_Gaussian.R', echo=TRUE)
plot_eval_by(sim, varying = "snr")
plot_eval_by(sim, varying = "snr", metric_name = "mse_pred")
source('~/Desktop/Numerical_studies/interactionnew/Gaussian/main_Gaussian.R', echo=TRUE)
source('~/Desktop/Numerical_studies/interactionnew/Gaussian/plot_Gaussian.R', echo=TRUE)
source('~/Desktop/Numerical_studies/interactionnew/Gaussian/main_Gaussian.R', echo=TRUE)
source('~/Desktop/Numerical_studies/interactionnew/Gaussian/main_Gaussian.R', echo=TRUE)
source('~/Desktop/Numerical_studies/interactionnew/Gaussian/plot_Gaussian.R', echo=TRUE)
source('~/Desktop/Numerical_studies/interactionnew/Gaussian/main_Gaussian.R', echo=TRUE)
source('~/Desktop/Numerical_studies/interactionnew/Gaussian/plot_Gaussian.R', echo=TRUE)
source('~/Desktop/Numerical_studies/interactionnew/Gaussian/main_speed.R', echo=TRUE)
source('~/Desktop/Numerical_studies/interactionnew/Gaussian/plot_speed.R', echo=TRUE)
source('~/Desktop/Numerical_studies/interactionnew/Gaussian/plot_speed.R', echo=TRUE)
rm(list = ls())
set.seed(123)
library(sprintr)
library(glmnet)
source("../other_methods/apl.R")
source("../other_methods/RAMP.R")
source("../other_methods/inter_pursuit.R")
load("./rawData/data.RData")
setwd("~/Desktop/Numerical_studies/interactionnew/TripAdvisor")
load("./rawData/data.RData")
idx_train <- sample(nrow(X_bin), size = ceiling(0.1 * nrow(X_bin)), replace = FALSE)
# we use presense-absense instead of count for now
X <- X_bin
X_train <- X[idx_train, ]
X_test <- X[-idx_train, ]
X_train <- X[idx_train, which(colSums(X_train) != 0)]
X_test <- X[-idx_train, which(colSums(X_train) != 0)]
y_train <- rating_all_final[idx_train]
y_test <- rating_all_final[-idx_train]
n <- nrow(X_train)
p <- ncol(X_train)
method_name <- c("MEL", "Two_stage Hier lasso", "IP", "SIS_lasso",
"sprinter", "sprinter1cv")
measure_name <- c("prediction rmse",
"# selected main effects",
"# selected interactions")
result <- matrix(NA, nrow = length(measure_name),
ncol = length(method_name))
rownames(result) <- measure_name
colnames(result) <- method_name
out <- list()
source('~/Desktop/Numerical_studies/interactionnew/TripAdvisor/tripAdvisor.R', echo=TRUE)
source('~/Desktop/Numerical_studies/interactionnew/TripAdvisor/tripAdvisor.R', echo=TRUE)
result
t(result)
length(out)
out[[6]]
out[[6]]$compact
dim(out[[6]]$compact)
rm(list = ls())
library(sprintr)
load("./rawData/data.RData")
load("out.RData")
name <- colnames(X_train)
rm(list = ls())
library(sprintr)
load("./rawData/data.RData")
load("out.RData")
load("result.RData")
# out[[5]] is the result of sprinter
mod <- out[[6]]
me <- mod$compact[mod$compact[, 1] == 0, , drop = FALSE]
inter <- mod$compact[mod$compact[, 1] != 0, , drop = FALSE]
main <- data.frame(names = c(var[me[, 2]]), est = me[, 3])
main <- main[order(main$est), ]
main
int <- data.frame(names = paste(var[inter[, 1]], "*", var[inter[, 2]]), est = inter[, 3])
int <- int[order(int$est), ]
head(main, 10)
tail(main, 10)
source('~/Desktop/Numerical_studies/interactionnew/Gaussian/plot_speed.R', echo=TRUE)
setwd("~/Desktop/Numerical_studies/interactionnew/Gaussian")
source('~/Desktop/Numerical_studies/interactionnew/Gaussian/plot_speed.R', echo=TRUE)
